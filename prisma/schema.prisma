// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Blends        Blend[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Product Models

model ProductBaseCode {
    id                     Int                     @id /// 3-digit. First digit indicates general product type.
    name                   String
    description            String?
    ProductCodes           ProductCode[]
    BlendableProducts      BlendableProduct[]
    BlendFormulaComponents BlendFormulaComponent[]
}

model ProductSizeCode {
    id           Int           @id /// e.g., 0 = "N/A"; 1 = "bulk"; 5 = "pail"; 55 = "drum"; 275 = "275 Gal. Tote"; 330 = "330 Gal. Tote"
    name         String
    description  String?
    ProductCodes ProductCode[]
}

/// Used for determining customer-specific requirements for labeling (and other packaging details), formulation details, etc.
model ProductVariantCode {
    id           Int           @id /// e.g., 0 = "N/A"; 1 = "Store Brand"
    name         String
    description  String?
    ProductCodes ProductCode[]
}

model ProductCode {
    BaseCode      ProductBaseCode    @relation(fields: [baseCodeId], references: [id])
    baseCodeId    Int
    SizeCode      ProductSizeCode    @relation(fields: [sizeCodeId], references: [id])
    sizeCodeId    Int
    VariantCode   ProductVariantCode @relation(fields: [variantCodeId], references: [id])
    variantCodeId Int
    Product       Product?

    @@id([baseCodeId, sizeCodeId, variantCodeId])
}

model Product {
    Code            ProductCode      @relation(fields: [baseCodeId, sizeCodeId, variantCodeId], references: [baseCodeId, sizeCodeId, variantCodeId])
    baseCodeId      Int
    sizeCodeId      Int
    variantCodeId   Int
    description     String?
    quantityInStock Decimal?         @default(0)
    salesPrice      Decimal?
    SalesOrderItems SalesOrderItem[]

    @@unique([baseCodeId, sizeCodeId, variantCodeId])
}

// Blend Models

model BlendableProduct {
    BaseCode   ProductBaseCode @relation(fields: [baseCodeId], references: [id])
    baseCodeId Int             @unique
    Formulas   BlendFormula[]
    Blends     Blend[]
}

model BlendFormula {
    id         String                  @id @default(cuid())
    Product    BlendableProduct        @relation(fields: [productId], references: [baseCodeId])
    productId  Int
    Components BlendFormulaComponent[]
    Blends     Blend[]
}

model BlendFormulaComponent {
    id              String           @id @default(cuid())
    Formula         BlendFormula     @relation(fields: [formulaId], references: [id])
    formulaId       String
    BaseCode        ProductBaseCode  @relation(fields: [baseCodeId], references: [id])
    baseCodeId      Int
    proportion      Decimal
    note            String?
    BlendComponents BlendComponent[]

    @@unique([formulaId, baseCodeId])
}

model BlendComponent {
    FormulaComponent   BlendFormulaComponent @relation(fields: [formulaComponentId], references: [id])
    formulaComponentId String
    Blend              Blend                 @relation(fields: [blendId], references: [id])
    blendId            String
    source             String
    quantity           Decimal
    note               String?

    @@unique([formulaComponentId, blendId])
}

model Blend {
    id            String           @id @default(cuid())
    Product       BlendableProduct @relation(fields: [productId], references: [baseCodeId])
    productId     Int
    Formula       BlendFormula     @relation(fields: [formulaId], references: [id])
    formulaId     String
    Components    BlendComponent[]
    quantity      Int
    destination   String
    RequestedBy   User             @relation(fields: [requestedById], references: [id])
    requestedById String
}

// Order Models

model Customer {
    id                       Int          @id @default(autoincrement())
    name                     String       @unique
    Orders                   SalesOrder[]
    Addresses                Address[]
    DefaultBillingAddress    Address?     @relation(name: "defaultBilling", fields: [defaultBillingAddressId], references: [id])
    defaultBillingAddressId  String?      @unique
    DefaultShippingAddress   Address?     @relation(name: "defaultShipping", fields: [defaultShippingAddressId], references: [id])
    defaultShippingAddressId String?      @unique
}

model Address {
    id              String    @id @default(cuid())
    street          String
    city            String
    state           String
    zip             String
    Customer        Customer  @relation(fields: [customerId], references: [id])
    customerId      Int
    defaultBilling  Customer? @relation(name: "defaultBilling")
    defaultShipping Customer? @relation(name: "defaultShipping")
}

model SalesOrderItem {
    id            String     @id @default(cuid())
    Order         SalesOrder @relation(fields: [orderId], references: [id])
    orderId       Int
    Product       Product    @relation(fields: [baseCodeId, sizeCodeId, variantCodeId], references: [baseCodeId, sizeCodeId, variantCodeId])
    baseCodeId    Int
    sizeCodeId    Int
    variantCodeId Int
    quantity      Decimal
    pricePerUnit  Decimal
    notes         String?
}

model SalesOrder {
    id              Int              @id @default(autoincrement())
    Customer        Customer         @relation(fields: [customerId], references: [id])
    customerId      Int
    Items           SalesOrderItem[]
    notes           String?
    orderedOn       DateTime         @default(now())
    readyOn         DateTime?
    shippedOn       DateTime?
    deliveredOn     DateTime?
    readyTarget     DateTime?
    shippedTarget   DateTime?
    deliveredTarget DateTime?
}
