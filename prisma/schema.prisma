generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    factoryId     String?   @unique
    Accounts      Account[]
    Sessions      Session[]
    Factory       Factory?  @relation(fields: [factoryId], references: [id], onDelete: SetNull)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Factory {
    id                String             @id @default(cuid())
    name              String
    Blends            Blend[]
    BlendComponents   BlendComponent[]
    Customers         Customer[]
    Formulas          Formula[]
    FormulaComponents FormulaComponent[]
    Products          Product[]
    ProductBases      ProductBase[]
    ProductCodes      ProductCode[]
    ProductSizes      ProductSize[]
    ProductVariants   ProductVariant[]
    SalesOrders       SalesOrder[]
    SalesOrderItems   SalesOrderItem[]
    Tanks             Tank[]
    User              User?
}

model ProductBase {
    factoryId    String
    /// 3-digit. First digit indicates general product type.
    code         Int
    name         String
    description  String
    Factory      Factory       @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    ProductCodes ProductCode[]

    @@id([factoryId, code])
}

model ProductSize {
    factoryId    String
    /// e.g., 0 = "N/A"; 1 = "bulk"; 5 = "pail"; 55 = "drum"; 275 = "275 Gal. Tote"; 330 = "330 Gal. Tote"
    code         Int
    name         String
    description  String
    ProductCodes ProductCode[]
    Factory      Factory       @relation(fields: [factoryId], references: [id], onDelete: Cascade)

    @@id([factoryId, code])
}

/// Used for determining customer-specific requirements for labeling (and other packaging details), formulation details, etc.
model ProductVariant {
    factoryId    String
    /// e.g., 0 = "N/A"; 1 = "Store Brand"
    code         Int
    name         String
    description  String
    ProductCodes ProductCode[]
    Factory      Factory       @relation(fields: [factoryId], references: [id], onDelete: Cascade)

    @@id([factoryId, code])
}

model ProductCode {
    factoryId      String
    baseCode       Int
    sizeCode       Int
    variantCode    Int
    Product        Product?
    ProductVariant ProductVariant @relation(fields: [variantCode, factoryId], references: [code, factoryId], onDelete: Cascade)
    ProductSize    ProductSize    @relation(fields: [sizeCode, factoryId], references: [code, factoryId], onDelete: Cascade)
    ProductBase    ProductBase    @relation(fields: [baseCode, factoryId], references: [code, factoryId], onDelete: Cascade)
    Factory        Factory        @relation(fields: [factoryId], references: [id], onDelete: Cascade)

    @@id([factoryId, baseCode, sizeCode, variantCode])
}

model Product {
    factoryId         String
    baseCode          Int
    sizeCode          Int
    variantCode       Int
    description       String             @default("")
    quantityInStock   Decimal            @default(0)
    salesPrice        Decimal?
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @default(now())
    Code              ProductCode        @relation(fields: [factoryId, baseCode, sizeCode, variantCode], references: [factoryId, baseCode, sizeCode, variantCode], onDelete: Cascade)
    Factory           Factory            @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    SalesOrderItems   SalesOrderItem[]
    SourceTanks       Tank[]
    Formulas          Formula[]
    FormulaComponents FormulaComponent[]
    Blends            Blend[]
    BlendComponents   BlendComponent[]

    @@id([factoryId, baseCode, sizeCode, variantCode])
}

model Tank {
    factoryId              String
    /// Matches pattern /[A-Z]{1,2}\-\d{2}/ e.g., A-01 for Storage Tank or BL-01 for Blend Tank
    name                   String
    baseCode               Int?
    /// Defaults to sizeCode for Bulk products
    sizeCode               Int              @default(1)
    /// Defaults to variantCode for Unbranded products
    variantCode            Int              @default(0)
    /// Defaults to empty
    quantity               Decimal          @default(0)
    capacity               Decimal
    heel                   Decimal
    isDefaultSource        Boolean          @default(false)
    isBlendTank            Boolean          @default(false)
    createdAt              DateTime         @default(now())
    updatedAt              DateTime         @default(now())
    BlendsDestined         Blend[]          @relation("Destination Tank")
    BlendsBlended          Blend[]          @relation("Blend Tank")
    BlendComponentsSourced BlendComponent[]
    Product                Product?         @relation(fields: [factoryId, baseCode, sizeCode, variantCode], references: [factoryId, baseCode, sizeCode, variantCode])
    Factory                Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)

    @@id([name, factoryId])
}

model Blend {
    id                  String           @id @default(cuid())
    factoryId           String
    formulaId           String
    baseCode            Int
    sizeCode            Int
    variantCode         Int
    targetQuantity      Decimal
    actualQuantity      Decimal?
    blendTankName       String?
    destinationTankName String?
    note                String?
    /// Valid values: CREATED, QUEUED, ASSEMBLING, BLENDING, TESTING, ADJUSTING, PASSED, PUSHING, FLAGGED, COMPLETE
    status              String           @default("CREATED")
    createdAt           DateTime         @default(now())
    updatedAt           DateTime         @default(now())
    Product             Product          @relation(fields: [baseCode, sizeCode, variantCode, factoryId], references: [baseCode, sizeCode, variantCode, factoryId])
    DestinationTank     Tank?            @relation("Destination Tank", fields: [destinationTankName, factoryId], references: [name, factoryId])
    BlendTank           Tank?            @relation("Blend Tank", fields: [blendTankName, factoryId], references: [name, factoryId])
    Formula             Formula          @relation(fields: [formulaId], references: [id])
    Factory             Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    Components          BlendComponent[]
}

model BlendComponent {
    id             String   @id @default(cuid())
    factoryId      String
    blendId        String
    baseCode       Int
    sizeCode       Int
    variantCode    Int
    sourceTankName String
    targetQuantity Decimal
    actualQuantity Decimal?
    note           String?
    Blend          Blend    @relation(fields: [blendId], references: [id], onDelete: Cascade)
    Product        Product  @relation(fields: [baseCode, sizeCode, variantCode, factoryId], references: [baseCode, sizeCode, variantCode, factoryId])
    SourceTank     Tank     @relation(fields: [sourceTankName, factoryId], references: [name, factoryId])
    Factory        Factory  @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

model Formula {
    id          String             @id @default(cuid())
    factoryId   String
    baseCode    Int
    sizeCode    Int                @default(1)
    variantCode Int                @default(0)
    Blends      Blend[]
    Product     Product            @relation(fields: [baseCode, sizeCode, variantCode, factoryId], references: [baseCode, sizeCode, variantCode, factoryId])
    Factory     Factory            @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    Components  FormulaComponent[]
}

model FormulaComponent {
    id          String  @id @default(cuid())
    factoryId   String
    formulaId   String
    baseCode    Int
    sizeCode    Int     @default(1)
    variantCode Int     @default(0)
    proportion  Decimal
    note        String?
    Product     Product @relation(fields: [baseCode, sizeCode, variantCode, factoryId], references: [baseCode, sizeCode, variantCode, factoryId])
    Formula     Formula @relation(fields: [formulaId], references: [id], onDelete: Cascade)
    Factory     Factory @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

model Customer {
    id                       Int          @id @default(autoincrement())
    factoryId                String
    name                     String       @unique
    defaultBillingAddressId  String?      @unique
    defaultShippingAddressId String?      @unique
    Addresses                Address[]
    DefaultShippingAddress   Address?     @relation("Default Shipping", fields: [defaultShippingAddressId], references: [id])
    DefaultBillingAddress    Address?     @relation("Default Billing", fields: [defaultBillingAddressId], references: [id])
    Factory                  Factory      @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    Orders                   SalesOrder[]
}

model Address {
    id                 String    @id @default(cuid())
    street             String
    city               String
    state              String
    zip                String
    customerId         Int
    Customer           Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
    DefaultShippingFor Customer? @relation("Default Shipping")
    DefaultBillingFor  Customer? @relation("Default Billing")
}

model SalesOrderItem {
    id           String     @id @default(cuid())
    factoryId    String
    orderId      Int
    baseCode     Int
    sizeCode     Int
    variantCode  Int
    quantity     Decimal
    pricePerUnit Decimal
    notes        String?
    Product      Product    @relation(fields: [baseCode, sizeCode, variantCode, factoryId], references: [baseCode, sizeCode, variantCode, factoryId])
    Order        SalesOrder @relation(fields: [orderId], references: [id])
    Factory      Factory    @relation(fields: [factoryId], references: [id], onDelete: Cascade)
}

model SalesOrder {
    id              Int              @id @default(autoincrement())
    factoryId       String
    customerId      Int
    notes           String?
    orderedOn       DateTime         @default(now())
    readyOn         DateTime?
    shippedOn       DateTime?
    deliveredOn     DateTime?
    readyTarget     DateTime?
    shippedTarget   DateTime?
    deliveredTarget DateTime?
    Customer        Customer         @relation(fields: [customerId], references: [id])
    Factory         Factory          @relation(fields: [factoryId], references: [id], onDelete: Cascade)
    Items           SalesOrderItem[]
}
